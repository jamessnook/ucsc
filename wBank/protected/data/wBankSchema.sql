-----------------------------------------------------------------------------
--
-- Word Bank Schema for deployed database
-- And import commands for Math word bank
--
-- Note the sql commands here were used to import the math wordbank data
-- Other wordbanks may have different imput data.  The math wordbank candidate
-- slection was not done using the sql in wordBankSchema.sql so we do not have 
-- any preexisting data in the wordBank databse for those words so acivities 
-- such as matching up agains Celex are done by the commands here.  
--
-- The mathwordbank also had the table of data already generated by Xing. 
-- We may have this for Science but we will not have it for Social Studies 
-  and later banks.
--
-- NOTE the SQL below contains instructions which were used to both create the tables  
-- and to fill them with data for the math word bank.  FOr later word banks you do not 
-- need to execute the commands that create the tables and fill them with generic data.
-- You only need ot executethe commands to import the new data.  Some of the commands
-- such as the ones which fill the words table will also need to be modified to make 
-- sure that they do not re-import the math data.
--
-- It will also be important when importing words for additional word banks to
-- make sure that you check ot see if it is allready in the database (From the math word) 
-- and do not assign it a new ID.  This will require modification of the input 
-- process, we will not be able to assign the wordId when first importing to the 
-- imput words table.  We will insted need to check if it is allready in the words 
-- table when we copy it there, and only assign it a new wordId if it is new.
--
-- Note also that each word is uniquely identidfied by word, part of speech and word sense.
-- So bank as in river bank and bank as in Bank of America are two different words in the 
-- words table with two differnt word Ids.
--
------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- First create the database and it's tables
-- Also fill in some tables with general defualt data
--------------------------------------------------------------------------------

CREATE DATABASE wordBankDeploy;
USE wordBankDeploy;

-- database tables used for data import

-- table for input data with final word bank selection providded by researchers. 
-- This table holds data processed by K Stack with better definitions and word senses
-- than the inputWordsXing data
-- Exported from Excel to tab delimited text and then imported to MySQL
DROP TABLE inputWords; -- input data
CREATE TABLE inputWords (
    word     VARCHAR(60),                 -- the word
    isPubWord  BOOL DEFAULT FALSE,        -- True (1) if is publisher identified as important
    pos      VARCHAR(16) DEFAULT '',      -- part of speech where known 
    definition VARCHAR(500) DEFAULT '',   -- definition provided by researcehr
    defSource VARCHAR(60) DEFAULT '',     -- sorce of definition
    senseNum  INT DEFAULT 0,              -- from wordNet
    senseText VARCHAR(500) DEFAULT '',    -- description of word sense if not in word net
    notes VARCHAR(500) DEFAULT '',        -- researchers notes
    subjectId  INT                       -- Id identifying subject (math = 1 ...)
);
Alter table inputWords add index (word);
Alter table inputWords add index (senseNum);

-- Table for holding input word bank data procwessed by researchers ands Xing
-- THis data is combined with the data provbide by Kelly and imported above 
-- to create some of the attributes requersted
DROP TABLE inputWordsResearch;
CREATE TABLE inputWordsResearch (
    wordId  INT NOT NULL AUTO_INCREMENT, 
    subjectId  INT,
    word     VARCHAR(128) DEFAULT '', 
    baseWord  VARCHAR(512) DEFAULT '', -- inflectional family base word
    isPubWord  VARCHAR(30) DEFAULT '', 
    pos      VARCHAR(16) DEFAULT '',   -- part of speech where known 
    definition  VARCHAR(512) DEFAULT '', 
    defSource  VARCHAR(60) DEFAULT '', 
    wordForm  VARCHAR(60) DEFAULT '', 
    stems  VARCHAR(60) DEFAULT '', 
    posiblePos  VARCHAR(120) DEFAULT '', 
    PolysemyCnt  VARCHAR(60) DEFAULT '', 
    textGrades  VARCHAR(60) DEFAULT '', 
    dispersion  INT DEFAULT 0, 
    concreteness  VARCHAR(60) DEFAULT '', 
    zenoFreq  INT DEFAULT 0, 
    zenoMorphFreq  VARCHAR(60) DEFAULT '', 
    inCoxhead  INT DEFAULT 0, 
    headWord  VARCHAR(60) DEFAULT '', 
    cognateStatus  VARCHAR(60) DEFAULT '', 
    cognateWord  VARCHAR(60) DEFAULT '', 
    isContentWord  INT DEFAULT 0, 
    grades  VARCHAR(60) DEFAULT '', 
    subjects  VARCHAR(60) DEFAULT '', 
    subjectDispersion  INT DEFAULT 0,  -- from wordNet
    sourceDispersion  INT DEFAULT 0,
    PRIMARY KEY (wordId)
);

Alter table mathWordsXing add index (word);


-- actual database as used

-- map part of speech names to celex
-- this table allows us to match part of speech names in the data 
-- provided by the reseaerchers wit hthe class codes used by Celex
-- and the part of speech abbreviations used by wordNet
DROP TABLE posMap;
CREATE TABLE posMap (
    pos  VARCHAR(32),                 -- part of speech abreviation used by researchers
    name    VARCHAR(120),
    wordNetPos  VARCHAR(32),          -- word net pos abreviation
    ClassNum       INT NOT NULL,      -- Celex class number
    Class     VARCHAR(32)             -- Celex class
);
-- fill in initial default data
Alter table posMap add index (pos);
Alter table posMap add index (wordNetPos);
INSERT INTO posMap VALUES("", 'All', '', 0, "All");
INSERT INTO posMap VALUES("n", 'Noun', 'n', 1, "N");
INSERT INTO posMap VALUES("adj", 'Adjective', 'a', 2, "A");
INSERT INTO posMap VALUES("adj", 'Adjective', 's', 2, "A");
INSERT INTO posMap VALUES("v", 'Verb', 'v', 4, "V");
INSERT INTO posMap VALUES("adv", 'Adverb', 'r', 7, "ADV");

-----------------------------------------------------------------------
--
--  This is the main table for word bank words for all subjects (banks)
--
-- Most of the data in this table is copied from the inputWords table 
-- or is derived form other tables.  As a result it is  technically 
-- redundant to put it in the words table since you could derive it 
-- whenever you need it by ruinning queries. 
--   
-- Even thoug it is bad database design to have dublicates it is OK (safe) 
-- to do this for data that is static and does not change over time
-- The reason we do this is to speed up access at run time and simplify access.
-- This way we have a clean single table holding main wordbank data which 
-- simplifies queries and gives researchers a simpler interface and one 
-- plase to view things (using tools like MySQL Workbench.)
--  
-----------------------------------------------------------------------
DROP TABLE words;
CREATE TABLE words (
    id  INT NOT NULL AUTO_INCREMENT,              -- Unique Id for each word
    word     VARCHAR(60),              -- the word
    pos      VARCHAR(16) DEFAULT '',   -- part of speech where known 
    isPubWord  BOOL DEFAULT FALSE,     -- True (1) if is publisher identified as important
    lemmaId  INT DEFAULT 0,            -- lemma id from Celex or Vase if not in Celex
    wordNetId  INT DEFAULT 0,          -- lemma id from wordNet
    synsetId  INT DEFAULT 0,           -- synset id from wordnet
    head     VARCHAR(60) DEFAULT '',   -- Head word (lemma) from Celex
    headCnt  INT DEFAULT 0,            -- number of possible lemmas for this word
    posHeadCnt  INT DEFAULT 0,            -- number of possible lemmas for this word
    polysemyCnt  INT DEFAULT 0,        -- number of possible senses for this word and pos
    concrete  INT DEFAULT 0,           -- True (>0) if a concrete noun
    senseNum  INT DEFAULT 0,           -- from wordNet
    senseText VARCHAR(500) DEFAULT '', -- description of word sense if not in word net
    zenoFreq  FLOAT DEFAULT 0,         -- zeno word frequency
    PRIMARY KEY (id), 
    UNIQUE (word, pos, senseNum, senseText) 
);

Alter table words add synsetId  INT DEFAULT 0;
Alter table words add posHeadCnt  INT DEFAULT 0;
Alter table words add wordNetId  INT DEFAULT 0;
Alter table words add zenoFreq  FLOAT DEFAULT 0;

Alter table words add index (word);
Alter table words add index (head);
Alter table words add index (senseNum);

-- Create and fill table to store information for each subject
DROP TABLE subjects;
DROP TABLE subject;
CREATE TABLE subject (
    id  INT, 
    name     VARCHAR(120),
    abbreviation     VARCHAR(20),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO subject VALUES(-1, "All Subjects",  "All");
INSERT INTO subject VALUES(1, "Math",  "M");
INSERT INTO subject VALUES(2, "Science",  "S");
INSERT INTO subject VALUES(3, "Social Studies",  "SS");

DROP TABLE grade;
CREATE TABLE grade (
    id  INT, 
    name    VARCHAR(120),
    abbreviation     VARCHAR(20),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO grade VALUES(-1, "All Grades",  "All");
INSERT INTO grade VALUES(4, "Four",  "4th");
INSERT INTO grade VALUES(5, "Five",  "5th");

DROP TABLE concrete;
CREATE TABLE concrete (
    id  INT, 
    name    VARCHAR(120),
    abbreviation     VARCHAR(20),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO concrete VALUES(-1, "Any",  "Any");
INSERT INTO concrete VALUES(0, "Abstract",  "Abs");
INSERT INTO concrete VALUES(1, "Concrete",  "Con");

DROP TABLE polysemy;
CREATE TABLE polysemy (
    id  INT, 
    name    VARCHAR(120),
    abbreviation     VARCHAR(20),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO polysemy VALUES(-1, "All",  "");
INSERT INTO polysemy VALUES(1, ">0",  "");
INSERT INTO polysemy VALUES(2, ">1",  "");
INSERT INTO polysemy VALUES(3, ">2",  "");
INSERT INTO polysemy VALUES(4, ">3",  "");
INSERT INTO polysemy VALUES(5, ">4",  "");
INSERT INTO polysemy VALUES(6, ">5",  "");
INSERT INTO polysemy VALUES(7, ">6",  "");

DROP TABLE frequency;
CREATE TABLE frequency (
    id  INT, 
    name    VARCHAR(120),
    abbreviation     VARCHAR(20),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO frequency VALUES(0, "0",  "0");
INSERT INTO frequency VALUES(1, "1",  "1");
INSERT INTO frequency VALUES(10, "10",  "10");
INSERT INTO frequency VALUES(100, "100",  "100");
INSERT INTO frequency VALUES(1000, "1000",  "1000");
INSERT INTO frequency VALUES(10000, "10000",  "10000");
INSERT INTO frequency VALUES(100000, "100000",  "100000");
INSERT INTO frequency VALUES(1000000, "1000000",  "1000000");


-- Create and fill table to hold data about possible definition sources
DROP TABLE defSources;
CREATE TABLE defSources (
    defSourceId  INT  NOT NULL AUTO_INCREMENT,
    defSource     VARCHAR(250),
    PRIMARY KEY (defSourceId) 
);
Alter table defSources add index (defSource);
-- fill in initial default data
DLETE FROM defSOurces
INSERT INTO defSources (defSource) VALUES("MW online");
INSERT INTO defSources (defSource) VALUES("Webster's Online Dictionary");
INSERT INTO defSources (defSource) VALUES("4th math hm");
INSERT INTO defSources (defSource) VALUES("5th math hm");
INSERT INTO defSources (defSource) VALUES("4th math psf");
INSERT INTO defSources (defSource) VALUES("5th math psf");
INSERT INTO defSources (defSource) VALUES("Dictionary.com");

INSERT INTO defSources (defSource) VALUES("Dictionary.com");
INSERT INTO defSources (defSource) VALUES("Dictionary.com");
INSERT INTO defSources (defSource) VALUES("Dictionary.com");
INSERT INTO defSources (defSource) VALUES("Dictionary.com");


-- Create table relating words to the subjects they are associated with 
-- in the word bank (One word might occur in wordbanks for two subjects.)
DROP TABLE wordSubjects;
CREATE TABLE wordSubjects (
    wordId  INT,                  -- id assigned this word when it was first imported
    subjectId  INT,               -- id for subject (math = 1, etc.)
    definition     VARCHAR(500),  -- definition assigned the word for this subject
    defSourceId  INT DEFAULT 0    -- id of source for defintion (MW online etc.)
);
Alter table wordSubjects add index (wordId);
Alter table wordSubjects add index (subjectId);

-- in the word bank (One word might be used in 2 grades.)
DROP TABLE wordGrade;
CREATE TABLE wordGrade (
    wordId  INT,              -- Unique Id for each word
    grade  INT,              -- Unique Id for each grade
    PRIMARY KEY (wordId, grade)
);


-- Create and fill table relating words to the sources they were found in 
-- (One word might occur in multiple sources.)
DROP TABLE wordSources;
CREATE TABLE wordSources (
    wordId INT,                            -- unique id of word
    source  VARCHAR(60) ,                  -- unique name (also id)  for source
    page     VARCHAR(30) DEFAULT '',       -- page in source word was (first) found at
    isPubWord  BOOL DEFAULT FALSE,         -- True (1) if identified by publisher of this source as important word
    isNewWord  BOOL DEFAULT FALSE,         -- True (1) if identified by researcherof this source as a new word
    grade         INT,                     -- grade level for this word in this source
    PRIMARY KEY(wordId, source)
);

-- create a table to store information identifying which words are in 
-- the Coxhead list and what their coxhead status is
DROP TABLE coxheadWords;
CREATE TABLE coxheadWords (
    wordId  INT,
    status  INT,
    PRIMARY KEY(wordId)
);

-- create a table to store information identifying which words are Spanish
-- cognates and what their Spanish cognate is
DROP TABLE spanishWords;
CREATE TABLE spanishWords (
    wordId  INT,                  -- unique id for the word
    subjectId  INT,               -- id for subject (math = 1, etc.)
    cognate     VARCHAR(60)      -- Spanish cognate word
);


--------------------------------------------------------------------------
-- Now import the researchers wordbank data, etc. for the Math word Bank
--------------------------------------------------------------------------

-- This is the sql command used to import the word bank data
LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/mathWords.txt' INTO TABLE inputWords
LINES TERMINATED BY '\r\n' (word, isPubWord, pos, definition, defSource, senseNum, senseText, notes)
SET subjectId=1;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/scienceWords.txt' INTO TABLE inputWords
LINES TERMINATED BY '\r\n' (word, isPubWord, pos, definition, defSource, senseNum, senseText, notes)
SET subjectId=2;

-- import researchers math and science word data
LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/math.txt' INTO TABLE inputWordsResearch
LINES TERMINATED BY '\r\n' (word, isPubWord, pos, definition, defSource, baseWord, wordForm, stems,
    posiblePos, polysemyCnt, textGrades, dispersion, concreteness, zenoFreq, zenoMorphFreq, 
    inCoxhead, headWord, cognateStatus, cognateWord, isContentWord, 
    @dummy, @dummy, @dummy, @dummy, @dummy, @dummy, @dummy, 
    grades, subjects, subjectDispersion, sourceDispersion)
SET subjectId=1;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/science.txt' INTO TABLE inputWordsResearch
LINES TERMINATED BY '\r\n' (word, isPubWord, pos, definition, defSource, baseWord, wordForm, stems,
    posiblePos, polysemyCnt, textGrades, dispersion, concreteness, zenoFreq, zenoMorphFreq, 
    inCoxhead, headWord, cognateStatus, cognateWord, @dummy, @dummy, @dummy, @dummy, isContentWord, 
    @dummy, @dummy, @dummy, @dummy, @dummy, @dummy, @dummy, 
    grades, subjects, subjectDispersion, sourceDispersion)
SET subjectId=2;


-- initialize word table with input data
INSERT IGNORE INTO words (word, pos, isPubWord, senseNum, senseText, definition)
  SELECT word, pos, isPubWord, senseNum, senseText, definition
  FROM  inputWords;

-- Trim unneeded quotes and carriage returns from senseText
UPDATE words SET senseText=TRIM(BOTH '"' FROM senseText);
UPDATE words SET senseText=REPLACE(senseText, '\n', ' ');
UPDATE words SET senseText=REPLACE(senseText, '\r', ' ');

-- set up defsources
UPDATE inputWords SET defSource='MW online' WHERE defSource='MWonline';
DELETE FROM defSources;
INSERT INTO defSources (defSource)
  SELECT DISTINCT defSource 
  FROM  inputWords;


-- Now find additional data and assign to table
-- Since this data is derived form other tables it technically 
-- redundant to put it in the words table since you could derive it 
-- whenever you need it by running these queries.  The reason we do 
-- this is to speed up access at run time.  even thoug it is bad
-- database design to have dublicates it is OK (safe) for data that is 
-- static and does not change over time
-- likewise we could reference the inputWords table rather than 
-- copying the data here but this way we have a clean single table holding 
-- main wordbank data whioc hsimplifies queries and gives researchers a
-- simpler interface and one plase to view things (using tools like 
-- MySQL Workbench.)

-- for default set head to word
UPDATE words SET head=word;

-- Find Plural Lemmas from wordNet
INSERT INTO words (id, head, wordNetId)
  SELECT words.id, wordNet.nplural.lemma, wordNet.nplural.wordid
    FROM words 
    JOIN wordNet.nplural ON (words.word=wordNet.nplural.plural)
ON DUPLICATE KEY UPDATE head=wordNet.nplural.lemma, wordNetId=wordNet.nplural.wordid;

-- Find Lemmas from wordNet
INSERT INTO words (id, head, wordNetId)
  SELECT words.id, wordNet.words.lemma, wordNet.words.wordid
    FROM words 
    JOIN wordNet.words ON (words.word=wordNet.words.lemma)
ON DUPLICATE KEY UPDATE head=wordNet.words.lemma, wordNetId=wordNet.words.wordid;

-- find l head count from celex if you can
INSERT INTO words (id, headCnt)
  SELECT words.id, @cnt := count(DISTINCT LemmaMorph.Head) 
    FROM words 
    JOIN celex.WordOrthSpell ON (words.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaMorph ON (celex.WordMorph.IdNumLemma = celex.LemmaMorph.IdNum)
  GROUP BY id
ON DUPLICATE KEY UPDATE headCnt= @cnt;

-- find head count for part of speech matches from celex if you can
INSERT INTO words (id, posHeadCnt)
  SELECT words.id, @cnt := count(DISTINCT LemmaMorph.Head) 
    FROM words JOIN posMap USING(pos)
    JOIN celex.WordOrthSpell ON (words.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaMorph ON (celex.WordMorph.IdNumLemma = celex.LemmaMorph.IdNum)
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum 
      AND posMap.CLassNUm = celex.LemmaSyntax.CLassNUm )
  GROUP BY id
ON DUPLICATE KEY UPDATE posHeadCnt= @cnt;

-- assign head word (lemma) for each input word to words table
INSERT INTO words (id, head, lemmaId)
  SELECT words.id, celex.LemmaSyntax.Head, celex.LemmaSyntax.IdNum
    FROM words
    JOIN celex.WordOrthSpell ON (words.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum)
ON DUPLICATE KEY UPDATE head=celex.LemmaSyntax.Head, lemmaId=celex.LemmaSyntax.IdNum;

-- assign head word (lemma) for each input word to words table
INSERT INTO words (id, head, lemmaId)
  SELECT words.id, celex.LemmaSyntax.Head, celex.LemmaSyntax.IdNum
    FROM words JOIN posMap USING(pos)
    JOIN celex.WordOrthSpell ON (words.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum 
      AND posMap.CLassNUm = celex.LemmaSyntax.CLassNUm )
ON DUPLICATE KEY UPDATE head=celex.LemmaSyntax.Head, lemmaId=celex.LemmaSyntax.IdNum;

-- calculate and assign polysemy count for each word
-- find ones missed the first time
-- this time match my word rather than Celex lemma
-- We are matching Celex lemmas against wordNet lemmas the first time
-- and they will not always match
INSERT INTO wordBankDeploy.words (id, polysemyCnt)
  SELECT wordBankDeploy.words.id, @cnt := count(DISTINCT wordNet.senses.synsetid) 
    FROM wordBankDeploy.words JOIN wordNet.words ON (word=lemma)
    JOIN wordNet.senses ON (wordNet.words.wordId=wordNet.senses.wordId)
    JOIN wordBankDeploy.posMap ON (wordBankDeploy.words.pos=wordBankDeploy.posMap.pos)
    JOIN wordNet.synsets ON(posMap.wordNetPos = wordNet.synsets.pos
       AND wordNet.senses.synsetid=wordNet.synsets.synsetid)
  GROUP BY wordBankDeploy.words.id
ON DUPLICATE KEY UPDATE polysemyCnt= @cnt;

-- calculate and assign polysemy count for each word
INSERT INTO wordBankDeploy.words (id, polysemyCnt)
  SELECT wordBankDeploy.words.id, @cnt := count(DISTINCT wordNet.senses.synsetid) 
    FROM wordBankDeploy.words JOIN wordNet.words ON (head=lemma)
    JOIN wordNet.senses ON (wordNet.words.wordId=wordNet.senses.wordId)
    JOIN wordBankDeploy.posMap ON (wordBankDeploy.words.pos=wordBankDeploy.posMap.pos)
    JOIN wordNet.synsets ON(posMap.wordNetPos = wordNet.synsets.pos
       AND wordNet.senses.synsetid=wordNet.synsets.synsetid)
  GROUP BY wordBankDeploy.words.id
ON DUPLICATE KEY UPDATE polysemyCnt= @cnt;

-- Get word concreteness from Xings data
UPDATE words SET concrete = 1 WHERE 'concrete' = (SELECT DISTINCT concreteness FROM inputWordsResearch WHERE word = words.word);

-- fill table with data relating words to the subjects (word banks) they are found in
DELETE FROM wordSubjects;
INSERT INTO wordSubjects (wordId, subjectId, definition, defSourceId)
  SELECT words.id, inputWords.subjectId, inputWords.definition, defSourceId
  FROM  words JOIN inputWords USING(word, pos, senseNum, senseText) JOIN defSources USING (defSource);

-- Trim unneeded quotes and carriage returns from definitons
UPDATE wordSubjects SET definition=TRIM(BOTH '"' FROM definition) where definition LIKE '"%';
UPDATE wordSubjects SET definition=REPLACE(definition, '\n', ' ');
UPDATE wordSubjects SET definition=REPLACE(definition, '\r', ' ');

-- Assign zeno word frequency to each word
UPDATE words SET zenoFreq = (SELECT U FROM zeno.rwords WHERE words.word = rwords.Word);
UPDATE words SET zenoFreq =0 WHERE zenoFreq IS NULL;

-- associate words with grades
INSERT INTO wordGrade (wordId, grade)
  SELECT words.id, 4
  FROM  words JOIN inputWordsResearch USING(word) JOIN inputWords USING (word, subjectId,senseNum, senseText)
  WHERE (grades LIKE '%4%' OR grades LIKE '%4' OR grades =4)
  AND words.pos=inputWords.pos AND SUBSTRING(words.pos,1,1)=SUBSTRING(inputWordsResearch.pos,1,1)
ON DUPLICATE KEY UPDATE grade = 4;

INSERT INTO wordGrade (wordId, grade)
  SELECT words.id, 5
  FROM  words JOIN inputWordsResearch USING(word) JOIN inputWords USING (word, subjectId,senseNum, senseText)
  WHERE (grades LIKE '%5%' OR grades LIKE '%5' OR grades =5)
  AND words.pos=inputWords.pos AND SUBSTRING(words.pos,1,1)=SUBSTRING(inputWordsResearch.pos,1,1)
ON DUPLICATE KEY UPDATE grade = 5;


-- import data relating words to their sources
-- data was first exported from Excel spreadsheet
-- there are four seperate imports here becasue in the original spreadsheet  
-- the data for differetn sourves were in different sets of collumns
LOAD DATA INFILE '/soe/jsnook/vase/wBank/wordCorpus.txt' INTO TABLE wordSources
LINES TERMINATED BY '\r\n' (@dummy, wordId, page, @dummy, @pWord, @nWord, @dummy, source, @dummy, @dummy)
SET isPubWord = @pWord = 'x', isNewWord = @nWord = 'x';

LOAD DATA INFILE '/soe/jsnook/vase/wBank/wordCorpus.txt' INTO TABLE wordSources
LINES TERMINATED BY '\r\n' (@dummy, wordId, 
@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy, 
page, @dummy, @pWord, @nWord, @dummy, source, @dummy, @dummy)
SET isPubWord = @pWord = 'x', isNewWord = @nWord = 'x';
DELETE FROM wordSources WHERE source='';

LOAD DATA INFILE '/soe/jsnook/vase/wBank/wordCorpus.txt' INTO TABLE wordSources
LINES TERMINATED BY '\r\n' (@dummy, wordId, 
@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy, 
@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,
page, @dummy, @pWord, @nWord, @dummy, source, @dummy, @dummy)
SET isPubWord = @pWord = 'x', isNewWord = @nWord = 'x';
DELETE FROM wordSources WHERE source='';

LOAD DATA INFILE '/soe/jsnook/vase/wBank/wordCorpus.txt' INTO TABLE wordSources
LINES TERMINATED BY '\r\n' (@dummy, wordId, 
@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy, 
@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,
@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,
page, @dummy, @pWord, @nWord, @dummy, source, @dummy, @dummy)
SET isPubWord = @pWord = 'x', isNewWord = @nWord = 'x';
DELETE FROM wordSources WHERE source='';

-- Clean up Grade data
UPDATE wordSources SET grade = 4 WHERE source LIKE '4%';
UPDATE wordSources SET grade = 5 WHERE source LIKE '5%';

-- import data coxhead word data from Xings data
DELETE FROM coxheadWords;
INSERT INTO coxheadWords (wordId, status)
  SELECT DISTINCT id, inCoxhead
  FROM  words JOIN inputWordsResearch USING(word) WHERE inCoxhead>0;

-- import spanish cognate data from Xings data
DELETE FROM spanishWords;
INSERT INTO spanishWords (wordId, subjectId, cognate)
  SELECT DISTINCT id, subjectId, cognateWord 
  FROM  words JOIN inputWordsResearch USING(word) JOIN inputWords USING (word, subjectId,senseNum, senseText)
  WHERE (NOT cognateStatus='notcognate') AND (NOT cognateStatus='') AND (NOT cognateWord='')
  AND words.pos=inputWords.pos AND SUBSTRING(words.pos,1,1)=SUBSTRING(inputWordsResearch.pos,1,1);


-- Aarons tables for topic and bucket matching
-- raw data for import from tsv
DROP TABLE IF EXISTS topicMapData;
CREATE TABLE TopicMapData (
    words VARCHAR(255) NOT NULL,
    topic VARCHAR(255) NOT NULL,
    typeId INT,
    grade INT,
    topicGroupId INT
);

-- intermediate data table
DROP TABLE IF EXISTS WordTopics;
CREATE TABLE WordTopics (
    	word VARCHAR(63) NOT NULL,
	topicId INT UNSIGNED NOT NULL
);


DROP TABLE IF EXISTS topics;
CREATE TABLE topics (
    id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    topic VARCHAR(255) NOT NULL,
    lower VARCHAR(255) NOT NULL,
    typeId INT,
    inSubjectMap  BOOL DEFAULT FALSE,        -- 
    inPageMap  BOOL DEFAULT FALSE,        -- 
    inUse     BOOL DEFAULT TRUE        -- 
    --UNIQUE (lower, typeId)
);

Alter table topics add inSubjectMap  BOOL DEFAULT FALSE;
Alter table topics add inPageMap  BOOL DEFAULT FALSE;
Alter table topics add inUse  BOOL DEFAULT TRUE;
INSERT INTO topics (id, topic, lower, typeId) VALUES(-1, "All Topics",  "all topics", -1);

DROP TABLE IF EXISTS topicWordMap;
CREATE TABLE TopicWordMap (
	id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	wordid VARCHAR(255) NOT NULL,           -- maps to wordBankDeploy table
	topicid INT UNSIGNED NOT NULL
);

-- Create and fill table to store information for each book etc
DROP TABLE groups;
CREATE TABLE groups (
    id  INT, 
    grade  INT, 
    title     VARCHAR(255),
    description     VARCHAR(511),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO groups VALUES(1, 4, "Math, 4th Grade", "");
INSERT INTO groups VALUES(2, 5, "Math, 5th Grade", "");
INSERT INTO groups VALUES(3, 5, "EnVision Math 5th Grade",  "");
INSERT INTO groups VALUES(4, 4, "Science, 4th Grade", "");
INSERT INTO groups VALUES(5, 5, "Science, 5th Grade", "");

-- Create and fill table to store information for each book etc
DROP TABLE topicType;
CREATE TABLE topicType (
    id  INT, 
    title     VARCHAR(255),
    description     VARCHAR(511),
    PRIMARY KEY (id) 
);
-- fill in initial default data
INSERT INTO topicType VALUES(1, "Chapter or Unit", "");
INSERT INTO topicType VALUES(2, "Bucket or Category", "");
INSERT INTO topicType VALUES(3, "Grouping (Meta Topic)", "");

-- Create and fill table to map topics to topic groups
DROP TABLE topicGroup;
CREATE TABLE topicGroup (
    topicId  INT, 
    groupId  INT, 
    PRIMARY KEY (topicId, groupId) 
);


-- This is the sql commands used to import Aarons topic data
DELETE FROM TopicMapData;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/4th grade science-topicwordmap.tsv' INTO TABLE TopicMapData
LINES TERMINATED BY '\r\n' (words, topic)
SET topicGroupId=4, typeId=1, grade=4;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/5th grade science-topicwordmap.tsv' INTO TABLE TopicMapData
LINES TERMINATED BY '\r\n' (words, topic)
SET topicGroupId=5, typeId=1, grade=5;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/EnVision Math 5th Grade-topicwordmap.tsv' INTO TABLE TopicMapData
LINES TERMINATED BY '\r\n' (words, topic)
SET topicGroupId=3, typeId=1, grade=5;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/Math 5th grade-topicwordmap.tsv' INTO TABLE TopicMapData
LINES TERMINATED BY '\r\n' (words, topic)
SET topicGroupId=2, typeId=1, grade=5;

INSERT INTO topics (topic, typeId, inSubjectMap)
  SELECT DISTINCT topic, typeId, TRUE
  FROM  topicMapData;

UPDATE topics SET inSubjectMap=TRUE WHERE lower in (SELECT DISTINCT LOWER(TRIM(topic)) FROM topicMapData);

-- add lost script to convert to lower and strip leading Junk

INSERT INTO topicGroup (topicId, groupId)
  SELECT DISTINCT topics.id, topicGroupId
  FROM  topicMapData JOIN topics USING(topic);

CREATE FUNCTION SPLIT_STR(
  x VARCHAR(255),
  delim VARCHAR(12),
  pos INT
)
RETURNS VARCHAR(255)
RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),
       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),
       delim, '');
-- usage
SELECT SPLIT_STR(string, delimiter, position)
SELECT SPLIT_STR('a|bb|ccc|dd', '|', 3) as third;

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 1), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 2), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 3), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 4), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 5), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 6), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 7), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 8), topics.id
  FROM  topicMapData JOIN topics USING(topic);

INSERT INTO WordTopics (word, topicId)
  SELECT SPLIT_STR(words, ' ', 9), topics.id
  FROM  topicMapData JOIN topics USING(topic);

DELETE FROM WordTopics WHERE word='';
SELECT count(*) from wordTopics WHERE word='';

-- Trim unneeded characters from words
UPDATE WordTopics SET word=TRIM(BOTH ' ' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '"' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH ',' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '.' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '\'' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '-' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '(' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH ')' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '#' FROM word);
UPDATE WordTopics SET word=TRIM(BOTH '?' FROM word);
DELETE FROM WordTopics WHERE LENGTH(word)<3;
DELETE FROM WordTopics WHERE word LIKE 'and';
DELETE FROM WordTopics WHERE word LIKE 'And';

-- intermediate data table
DROP TABLE IF EXISTS rawWords;
CREATE TABLE rawWords (
        id INT DEFAULT 0,  -- from word bank if any match
        type INT DEFAULT 0,  -- 0 = topic only, 1= topic or sub, 2 = topic, sup or top
    	word VARCHAR(63) NOT NULL,
    	head VARCHAR(63) DEFAULT '',
    	morph VARCHAR(127) DEFAULT '',
        headCnt  INT DEFAULT 0,          -- number of possible lemmas for this word
        LemmaId INT DEFAULT 0,   -- Celex
        wordNetId INT DEFAULT 0,   -- wordNet
        PRIMARY KEY (word)
);

Import Aarons word page mapping
-- intermediate data table
DROP TABLE IF EXISTS wordPage;
CREATE TABLE wordPage (
    	word VARCHAR(63) NOT NULL,
	rangeId INT NOT NULL,
        UNIQUE (word, rangeId)
);
-- intermediate data table
DROP TABLE IF EXISTS subWordPage;
CREATE TABLE subWordPage (
    	word VARCHAR(63) NOT NULL,
	rangeId INT NOT NULL,
        UNIQUE (word, rangeId)
);

-- page range data table
DROP TABLE IF EXISTS pageRange;
CREATE TABLE pageRange (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	begin INT,
        end INT,
	bookId INT NOT NULL,
        UNIQUE (begin, end, bookId)
);

-- run seperate php script wordPage.php on data files to import data into above tables
-- then do this stuff

update wordTopics set word = LOWER(word);
update wordTopics set word = REPLACE(word,'0','');
update wordTopics set word = REPLACE(word,'1','');
update wordTopics set word = REPLACE(word,'2','');
update wordTopics set word = REPLACE(word,'3','');
update wordTopics set word = REPLACE(word,'4','');
update wordTopics set word = REPLACE(word,'5','');
update wordTopics set word = REPLACE(word,'6','');
update wordTopics set word = REPLACE(word,'7','');
update wordTopics set word = REPLACE(word,'8','');
update wordTopics set word = REPLACE(word,'9','');
update wordTopics set word = REPLACE(word,',','');
update wordTopics set word = REPLACE(word,'.','');

INSERT INTO rawWords (word, type)
  SELECT DISTINCT word, 1
  FROM  WordTopics
  WHERE LENGTH(word)>2;

INSERT INTO rawWords (word, type)
  SELECT DISTINCT word, 2
  FROM  subWordPage
ON DUPLICATE KEY UPDATE type=2;

INSERT INTO rawWords (word, type)
  SELECT DISTINCT word, 3
  FROM  wordPage
ON DUPLICATE KEY UPDATE type=3;

-- for default set head to word
UPDATE rawWords SET head=word;

-- Find Plural Lemmas from wordNet
INSERT INTO rawWords (word, head, wordNetId)
  SELECT rawWords.word, wordNet.nplural.lemma, wordNet.nplural.wordid
    FROM rawWords 
    JOIN wordNet.nplural ON (rawWords.word=wordNet.nplural.plural)
ON DUPLICATE KEY UPDATE head=wordNet.nplural.lemma, wordNetId=wordNet.nplural.wordid;

-- Find Lemmas from wordNet
INSERT INTO rawWords (word, head, wordNetId)
  SELECT rawWords.word, wordNet.words.lemma, wordNet.words.wordid
    FROM rawWords 
    JOIN wordNet.words ON (rawWords.word=wordNet.words.lemma)
ON DUPLICATE KEY UPDATE head=wordNet.words.lemma, wordNetId=wordNet.words.wordid;

-- Find Lemmas from Celex
-- find lemma Id and head word from celex if you can
INSERT INTO rawWords (word, headCnt)
  SELECT rawWords.word, @cnt := count(DISTINCT LemmaMorph.Head) 
    FROM rawWords 
    JOIN celex.WordOrthSpell ON (rawWords.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaMorph ON (celex.WordMorph.IdNumLemma = celex.LemmaMorph.IdNum)
  GROUP BY word
ON DUPLICATE KEY UPDATE headCnt= @cnt;

-- assign head word (lemma) for each input word to words table
INSERT INTO rawWords (word, head, lemmaId)
  SELECT rawWords.word, celex.LemmaSyntax.Head, celex.LemmaSyntax.IdNum
    FROM rawWords 
    JOIN celex.WordOrthSpell ON (rawWords.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum) 
    JOIN celex.LemmaMorphParse ON (celex.WordMorph.IdNumLemma = celex.LemmaMorphParse.IdNum)
ON DUPLICATE KEY UPDATE head=celex.LemmaSyntax.Head, lemmaId=celex.LemmaSyntax.IdNum, morph=celex.LemmaMorphParse.StrucLab;

-- assign word id
INSERT INTO rawWords (id, word)
  SELECT words.id, rawWords.word
    FROM rawWords 
    JOIN words ON (rawWords.word=words.word)
ON DUPLICATE KEY UPDATE id=words.id;

-- assign word id
INSERT INTO rawWords (id, word)
  SELECT words.id, rawWords.word
    FROM rawWords 
    JOIN words ON (rawWords.head=words.head)
ON DUPLICATE KEY UPDATE id=words.id;

---------------------------------
-- intermediate data table
DROP TABLE IF EXISTS multiLemmaRawWords;
CREATE TABLE multiLemmaRawWords (
        id INT DEFAULT 0,  -- from word bank if any match
        type INT DEFAULT 0,  -- 0 = topic only, 1= topic or sub, 2 = topic, sup or top
    	word VARCHAR(63) NOT NULL,
    	head VARCHAR(63) DEFAULT '',
        lemmaId INT DEFAULT 0,   -- Celex
    	morph VARCHAR(127) DEFAULT '',
        PRIMARY KEY (word, lemmaId)
);

INSERT INTO multiLemmaRawWords (id, type, word, head, lemmaId, morph)
  SELECT DISTINCT rawWords.id, rawWords.type, rawWords.word, celex.LemmaSyntax.Head, celex.LemmaSyntax.IdNum, celex.LemmaMorphParse.StrucLab
    FROM rawWords 
    JOIN celex.WordOrthSpell ON (rawWords.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum) 
    JOIN celex.LemmaMorphParse ON (celex.WordMorph.IdNumLemma = celex.LemmaMorphParse.IdNum)
  Where rawWords.headCnt>1
ON DUPLICATE KEY UPDATE head=celex.LemmaSyntax.Head, lemmaId=celex.LemmaSyntax.IdNum, morph=celex.LemmaMorphParse.StrucLab;

INSERT INTO multiLemmaRawWords (id, word, lemmaId)
  SELECT DISTINCT words.id, multiLemmaRawWords.word, multiLemmaRawWords.lemmaId
    FROM words JOIN multiLemmaRawWords Using (word, lemmaId)
ON DUPLICATE KEY UPDATE id=words.id;

-- intermediate data table
DROP TABLE IF EXISTS multiLemmaBankWords;
CREATE TABLE multiLemmaBankWords (
        id INT DEFAULT 0,  -- from word bank if any match
    	word VARCHAR(63) NOT NULL,
        pos  VARCHAR(16) DEFAULT '',   -- part of speech where known 
    	head VARCHAR(63) DEFAULT '',
        lemmaId INT DEFAULT 0,   -- Celex
        senseNum INT DEFAULT 0,   -- Celex
    	morph VARCHAR(127) DEFAULT '',
    	definition VARCHAR(511) NOT NULL,
        PRIMARY KEY (word, lemmaId, pos, senseNum)
);

INSERT INTO multiLemmaBankWords (id, word, pos, head, lemmaId, senseNum, morph, definition)
  SELECT DISTINCT words.id, words.word, words.pos, celex.LemmaSyntax.Head, words.senseNum, 
      celex.LemmaSyntax.IdNum, celex.LemmaMorphParse.StrucLab, wordSubjects.definition
    FROM words JOIN posMap USING(pos) JOIN wordSubjects ON (word.id = wordId)
    JOIN celex.WordOrthSpell ON (words.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum 
      AND posMap.CLassNUm = celex.LemmaSyntax.CLassNUm )
    JOIN celex.LemmaMorphParse ON (celex.WordMorph.IdNumLemma = celex.LemmaMorphParse.IdNum)
  Where words.posHeadCnt>1 OR ( words.posHeadCnt=0 AND words.headCnt>1)
ON DUPLICATE KEY UPDATE head=celex.LemmaSyntax.Head, lemmaId=celex.LemmaSyntax.IdNum, morph=celex.LemmaMorphParse.StrucLab;

INSERT INTO multiLemmaBankWords (id, word, pos, head, lemmaId, morph)
  SELECT DISTINCT words.id, words.word, words.pos, celex.LemmaSyntax.Head, celex.LemmaSyntax.IdNum, celex.LemmaMorphParse.StrucLab
    FROM words 
    JOIN celex.WordOrthSpell ON (words.word=WordOrthSpell.WordDia)
    JOIN celex.WordMorph ON (WordMorph.IdNum=WordOrthSpell.IdNum ) 
    JOIN celex.LemmaSyntax ON (celex.WordMorph.IdNumLemma = celex.LemmaSyntax.IdNum)
    JOIN celex.LemmaMorphParse ON (celex.WordMorph.IdNumLemma = celex.LemmaMorphParse.IdNum)
  Where words.posHeadCnt=0 AND words.headCnt>1
ON DUPLICATE KEY UPDATE head=celex.LemmaSyntax.Head, lemmaId=celex.LemmaSyntax.IdNum, morph=celex.LemmaMorphParse.StrucLab;

--------------------------------------------
-- correct using Feedback

UPDATE words SET lemmaId=2711 WHERE id=68;
UPDATE words SET lemmaId=3224 WHERE id=76;
UPDATE words SET lemmaId=3691 WHERE id=1141;
UPDATE words SET lemmaId= 3987 WHERE id= 1167;
UPDATE words SET lemmaId= 6959 WHERE id= 1223;
UPDATE words SET lemmaId= 8414 WHERE id= 152 ;
UPDATE words SET lemmaId= 8414 WHERE id= 1269 ;
UPDATE words SET lemmaId= 8467 WHERE id= 158;
UPDATE words SET lemmaId= 8893 WHERE id= 1291;
UPDATE words SET lemmaId= 8980 WHERE id= 1302;
UPDATE words SET lemmaId= 9649 WHERE id= 215;
UPDATE words SET lemmaId= 11200 WHERE id= 233;
UPDATE words SET lemmaId= 12008 WHERE id= 1402;
UPDATE words SET lemmaId= 12414 WHERE id= 275;
UPDATE words SET lemmaId= 14458 WHERE id= 1500;
UPDATE words SET lemmaId= 16309 WHERE id= 377;
UPDATE words SET lemmaId= 16590 WHERE id= 384;
UPDATE words SET lemmaId= 16590 WHERE id= 385;
UPDATE words SET lemmaId= 16967 WHERE id= 1578;
UPDATE words SET lemmaId= 17720 WHERE id= 1600;
UPDATE words SET lemmaId= 21517 WHERE id= 1693;
UPDATE words SET lemmaId= 26160 WHERE id= 522 ;
UPDATE words SET lemmaId= 27601 WHERE id= 531;
UPDATE words SET lemmaId= 27601 WHERE id= 1840;
UPDATE words SET lemmaId= 28183 WHERE id= 548 ;
UPDATE words SET lemmaId= 21158 WHERE id= 549 ;
UPDATE words SET lemmaId= 28183 WHERE id= 550 ;
UPDATE words SET lemmaId= 29997 WHERE id= 1927;
UPDATE words SET lemmaId= 30024 WHERE id= 601;
UPDATE words SET lemmaId= 30850 WHERE id= 1951;
UPDATE words SET lemmaId= 31419 WHERE id= 1967;
UPDATE words SET lemmaId= 33204 WHERE id= 683;
UPDATE words SET lemmaId= 33204 WHERE id= 2010;
UPDATE words SET lemmaId= 33647 WHERE id= 2022 ;
UPDATE words SET lemmaId= 34458 WHERE id= 706;
UPDATE words SET lemmaId= 36799 WHERE id=  756;
UPDATE words SET lemmaId= 37646 WHERE id= 775;
UPDATE words SET lemmaId= 37938 WHERE id= 785;
UPDATE words SET lemmaId= 39270 WHERE id= 2224;
UPDATE words SET lemmaId= 39377 WHERE id= 839;
UPDATE words SET lemmaId= 39910 WHERE id= 2251;
UPDATE words SET lemmaId= 40739 WHERE id= 855;
UPDATE words SET lemmaId= 44413 WHERE id= 911;
UPDATE words SET lemmaId= 48425 WHERE id= 2487;
UPDATE words SET lemmaId= 50493 WHERE id= 2538;

UPDATE words SET senseNum=1 WHERE id= 1840;
UPDATE words SET senseNum=1 WHERE id= 531;

UPDATE words SET pos='v' WHERE id= 775 ;

UPDATE rawWords SET lemmaId=2711 WHERE id=68;
UPDATE rawWords SET lemmaId=3224 WHERE id=76;
UPDATE rawWords SET lemmaId=3691 WHERE id=1141;
UPDATE rawWords SET lemmaId= 3987 WHERE id= 1167;
UPDATE rawWords SET lemmaId= 6959 WHERE id= 1223;
UPDATE rawWords SET lemmaId= 8414 WHERE id= 152 ;
UPDATE rawWords SET lemmaId= 8414 WHERE id= 1269 ;
UPDATE rawWords SET lemmaId= 8467 WHERE id= 158;
UPDATE rawWords SET lemmaId= 8893 WHERE id= 1291;
UPDATE rawWords SET lemmaId= 8980 WHERE id= 1302;
UPDATE rawWords SET lemmaId= 9649 WHERE id= 215;
UPDATE rawWords SET lemmaId= 11200 WHERE id= 233;
UPDATE rawWords SET lemmaId= 12008 WHERE id= 1402;
UPDATE rawWords SET lemmaId= 12414 WHERE id= 275;
UPDATE rawWords SET lemmaId= 14458 WHERE id= 1500;
UPDATE rawWords SET lemmaId= 16309 WHERE id= 377;
UPDATE rawWords SET lemmaId= 16590 WHERE id= 384;
UPDATE rawWords SET lemmaId= 16590 WHERE id= 385;
UPDATE rawWords SET lemmaId= 16967 WHERE id= 1578;
UPDATE rawWords SET lemmaId= 17720 WHERE id= 1600;
UPDATE rawWords SET lemmaId= 21517 WHERE id= 1693;
UPDATE rawWords SET lemmaId= 26160 WHERE id= 522 ;
UPDATE rawWords SET lemmaId= 27601 WHERE id= 531;
UPDATE rawWords SET lemmaId= 27601 WHERE id= 1840;
UPDATE rawWords SET lemmaId= 28183 WHERE id= 548 ;
UPDATE rawWords SET lemmaId= 21158 WHERE id= 549 ;
UPDATE rawWords SET lemmaId= 28183 WHERE id= 550 ;
UPDATE rawWords SET lemmaId= 29997 WHERE id= 1927;
UPDATE rawWords SET lemmaId= 30024 WHERE id= 601;
UPDATE rawWords SET lemmaId= 30850 WHERE id= 1951;
UPDATE rawWords SET lemmaId= 31419 WHERE id= 1967;
UPDATE rawWords SET lemmaId= 33204 WHERE id= 683;
UPDATE rawWords SET lemmaId= 33204 WHERE id= 2010;
UPDATE rawWords SET lemmaId= 33647 WHERE id= 2022 ;
UPDATE rawWords SET lemmaId= 34458 WHERE id= 706;
UPDATE rawWords SET lemmaId= 36799 WHERE id=  756;
UPDATE rawWords SET lemmaId= 37646 WHERE id= 775;
UPDATE rawWords SET lemmaId= 37938 WHERE id= 785;
UPDATE rawWords SET lemmaId= 39270 WHERE id= 2224;
UPDATE rawWords SET lemmaId= 39377 WHERE id= 839;
UPDATE rawWords SET lemmaId= 39910 WHERE id= 2251;
UPDATE rawWords SET lemmaId= 40739 WHERE id= 855;
UPDATE rawWords SET lemmaId= 44413 WHERE id= 911;
UPDATE rawWords SET lemmaId= 48425 WHERE id= 2487;
UPDATE rawWords SET lemmaId= 50493 WHERE id= 2538;


---------------------------
-- Chapter (topic) page maping


Import Aarons word page mapping
-- intermediate data table
DROP TABLE IF EXISTS rawTopicPage;
CREATE TABLE rawTopicPage (
    	topic VARCHAR(63) NOT NULL,
	begin INT NOT NULL,
	end   INT NOT NULL,
	bookId INT NOT NULL,
	rangeId INT DEFAULT 0,
	topicId INT DEFAULT 0,
        UNIQUE (topic, begin, end, bookId)
);

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/Math4Chapters.txt' INTO TABLE rawTopicPage
LINES TERMINATED BY '\r\n' (topic, begin, end)
SET bookId=1;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/Math5Chapters.txt' INTO TABLE rawTopicPage
LINES TERMINATED BY '\r\n' (topic, begin, end)
SET bookId=2;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/EnvisionMath5Chapters.txt' INTO TABLE rawTopicPage
LINES TERMINATED BY '\r\n' (topic, begin, end)
SET bookId=3;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/Science4Chapters.txt' INTO TABLE rawTopicPage
LINES TERMINATED BY '\r\n' (topic, begin, end)
SET bookId=4;

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/aaron/Science5Chapters.txt' INTO TABLE rawTopicPage
LINES TERMINATED BY '\r\n' (topic, begin, end)
SET bookId=5;

UPDATE rawTopicPage Set rangeId = (SELECT id from pageRange WHERE bookId=rawTopicPage.bookId 
   AND begin=rawTopicPage.begin AND end=rawTopicPage.end)
UPDATE rawTopicPage SET rangeId=0 WHERe rangeId IS NULL;
INSERT INTO pageRange (begin, end, bookId)
  SELECT DISTINCT begin, end, bookId
    FROM rawTopicPage 
    WHERE rangeId=0;
ON DUPLICATE KEY UPDATE end=rawTopicPage.end;

UPDATE rawTopicPage Set topicId = (SELECT id from topics WHERE lower = LOWER(TRIM(rawTopicPage.topic))) 
UPDATE rawTopicPage SET topicId =0 WHERe topicId IS NULL;

INSERT INTO topics (topic, lower, inPageMap)
  SELECT DISTINCT topic, LOWER(TRIM(topic)), TRUE
    FROM rawTopicPage 
    WHERE topicId=0;
ON DUPLICATE KEY UPDATE topic=rawTopicPage.topic;

-- Trim unneeded quotes and carriage returns from topic
UPDATE topics SET lower=TRIM(BOTH '"' FROM lower);
UPDATE topics SET lower=REPLACE(lower, '\n', ' ');
UPDATE topics SET lower=REPLACE(lower, '\r', ' ');
UPDATE topics SET topic=TRIM(BOTH '"' FROM topic);
UPDATE topics SET topic=REPLACE(topic, '\n', ' ');
UPDATE topics SET topic=REPLACE(topic, '\r', ' ');

UPDATE topics SET inPageMap=TRUE WHERE lower in (SELECT DISTINCT LOWER(TRIM(topic)) FROM rawTopicPage);

UPDATE topics SET inUse=TRUE;

INSERT IGNORE INTO topicPage (topicId, rangeId) SELECT DISTINCT topicId, rangeId FROM rawTopicPage;

INSERT IGNORE INTO topicGroup (topicId, groupId)
  SELECT DISTINCT topicId, bookId
  FROM  rawTopicPage;

--------------------------------------
-- word topic map:
DROP TABLE IF EXISTS wordTopic;
CREATE TABLE wordTopic (
	wordid INT NOT NULL,   
	topicid INT NOT NULL,
	exp INT NOT NULL DEFAULT 0,   -- level of expanded match used if any
    PRIMARY KEY (wordId, topicId)
);

-- figure out word topic map fropm page ranges

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 20 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-20<=tr.begin AND tr.begin<=wr.end+20) OR (tr.begin-20<=wr.begin AND wr.begin<=tr.end+20)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=20;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 15 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-15<=tr.begin AND tr.begin<=wr.end+15) OR (tr.begin-15<=wr.begin AND wr.begin<=tr.end+15)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=15;


INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 10 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-10<=tr.begin AND tr.begin<=wr.end+10) OR (tr.begin-10<=wr.begin AND wr.begin<=tr.end+10)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=10;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 9 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-9<=tr.begin AND tr.begin<=wr.end+9) OR (tr.begin-9<=wr.begin AND wr.begin<=tr.end+9)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=9;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 8 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-8<=tr.begin AND tr.begin<=wr.end+8) OR (tr.begin-8<=wr.begin AND wr.begin<=tr.end+8)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=8;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 7 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-7<=tr.begin AND tr.begin<=wr.end+7) OR (tr.begin-7<=wr.begin AND wr.begin<=tr.end+7)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=7;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 6 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-6<=tr.begin AND tr.begin<=wr.end+6) OR (tr.begin-6<=wr.begin AND wr.begin<=tr.end+6)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=6;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 5 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-5<=tr.begin AND tr.begin<=wr.end+5) OR (tr.begin-5<=wr.begin AND wr.begin<=tr.end+5)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=5;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 4 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-4<=tr.begin AND tr.begin<=wr.end+4) OR (tr.begin-4<=wr.begin AND wr.begin<=tr.end+4)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=4;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 3 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-3<=tr.begin AND tr.begin<=wr.end+3) OR (tr.begin-3<=wr.begin AND wr.begin<=tr.end+3)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=3;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 2 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-2<=tr.begin AND tr.begin<=wr.end+2) OR (tr.begin-2<=wr.begin AND wr.begin<=tr.end+2)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=2;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 1 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin-1<=tr.begin AND tr.begin<=wr.end+1) OR (tr.begin-1<=wr.begin AND wr.begin<=tr.end+1)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=1;

INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, tr.topicId, 0 
      FROM (SELECT word, begin, end, bookId  FROM wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
      JOIN (SELECT topicId, begin, end, bookId FROM topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr 
      ON (((wr.begin<=tr.begin AND tr.begin<=wr.end) OR (tr.begin<=wr.begin AND wr.begin<=tr.end)) AND wr.bookId=tr.bookId)
      JOIN rawWords USING (word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=0;

---- add from arrons supject map data
INSERT INTO wordTopic (wordId, topicId, exp)
    SELECT DISTINCT rawWords.id, wordTopics.topicId, 0 
      FROM rawWords JOIN wordTopics USING(word) WHERE rawWords.id >0
ON DUPLICATE KEY UPDATE exp=0;


SELECT wordId FROM (wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
						JOIN (topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr
						WHERE topicId =$id')");

--------------------------------------
-- figure out expanded word topic map fropm page ranges + 2
SELECT wordId FROM (wordPage JOIN pageRange ON (wordPage.rangeId=pageRange.id)) AS wr
						JOIN (topicPage JOIN pageRange ON (topicPage.rangeId=pageRange.id)) AS tr
						WHERE topicId =$id')");


-----------------------------------------
-- Word Lists

-- in the word bank (One word might occur in wordbanks for two subjects.)
DROP TABLE list;
DROP TABLE lists;
CREATE TABLE lists (
    id  INT PRIMARY KEY AUTO_INCREMENT,              -- Unique Id for each word list
    name  VARCHAR(127) UNIQUE,               			
    description  VARCHAR(127),
    username   VARCHAR(63),             		
    type   INT DEFAULT 0,               			
    groupId  INT DEFAULT 0               			
);

-- in the word bank (One word might occur in wordbanks for two subjects.)
DROP TABLE wordList;
CREATE TABLE wordList (
    wordId  INT,              -- Unique Id for each word
    listId  INT,              -- Unique Id for each list
    PRIMARY KEY (wordId, listId),
    foreign key (wordId) references words(id),
    foreign key (listId) references lists(id)
);

-- temp table for data in put
DROP TABLE IF EXISTS topicsKms;
CREATE TABLE topicsKms (
    id INT,
    notes  VARCHAR(255),
    metaId INT,
    metaTopic VARCHAR(255),
    topic VARCHAR(255) NOT NULL,
    lower VARCHAR(255) NOT NULL,
    typeId INT
);

LOAD DATA INFILE 'c:/users/jim/documents/vase/wordBank/topicsKms.txt' INTO TABLE topicsKms
LINES TERMINATED BY '\r\n' (id, notes, metaID, metaTopic, topic, lower, typeId);

-- map table to associate topics with another topic as parent-child
DROP TABLE IF EXISTS topicMap;
CREATE TABLE topicMap (
    topicId INT,
    parentId INT,
    PRIMARY KEY (topicId, parentId)
);

SELECT count(Distinct metaId) FROM topicsKms;
SELECT count(Distinct metaTopic) FROM topicsKms;

Alter table topics add metaId  INT DEFAULT 0;
--INSERT INTO topics (id, topic, lower, typeId) VALUES(-1, "All Topics",  "all topics", -1);

---- add meta topics to topic table
INSERT INTO topics (metaId, topic, lower, typeId)
    SELECT DISTINCT(metaId), metaTopic, LOWER(metaTopic), 3 
      FROM topicsKms WHERE metaId>0;
      
INSERT INTO topicMap (topicId, parentId)
    SELECT DISTINCT topicsKms.id, topics.id  
      FROM topicsKms JOIN topics USING (metaId) WHERE metaId>0;



